% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/margins.R
\name{summarise_with_margins}
\alias{summarise_with_margins}
\alias{union_all_with_margins}
\alias{nest_with_margins}
\alias{nest_by_with_margins}
\title{Grouped operations with margins}
\usage{
summarise_with_margins(
  .data,
  ...,
  .margins = NULL,
  .without_all = NULL,
  .with_all = NULL,
  .margin_name = "(all)",
  .sort = is.data.frame(.data)
)

union_all_with_margins(
  .data,
  .margins = NULL,
  .without_all = NULL,
  .with_all = NULL,
  .margin_name = "(all)",
  .sort = FALSE
)

nest_with_margins(
  .data,
  .margins = NULL,
  .without_all = NULL,
  .with_all = NULL,
  .margin_name = "(all)",
  .sort = TRUE,
  .key = NULL,
  .names_sep = NULL
)

nest_by_with_margins(
  .data,
  .margins = NULL,
  .without_all = NULL,
  .with_all = NULL,
  .margin_name = "(all)",
  .sort = TRUE,
  .key = "data",
  .keep = FALSE
)
}
\arguments{
\item{.data}{\itemize{
\item For \code{summarise_with_margins()} and \code{union_all_with_margins()} : a data frame or lazy table.
\itemize{
\item Lazy tables created by \code{{arrow}} does not work.
If you want to work with it, it is an easy way to convert to a duckdb back-end using \code{arrow::to_duckdb()} in advance.
}
\item For \code{nest_with_margins()} and \code{nest_by_with_margins()}: a data frame (not lazy table).
}}

\item{...}{Name-value pairs as used in \code{\link[dplyr:summarise]{dplyr::summarise()}}.}

\item{.margins}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> Grouping columns which margins are calculated, starting from the highest parent of the hierarchy.}

\item{.without_all}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> Additional group variables without hierarchy to which \code{.margin_name} will \emph{NOT} be added.}

\item{.with_all}{<\code{\link[=dplyr_tidy_select]{tidy-select}}> Additional group variables without hierarchy to which \code{.margin_name} will be added.}

\item{.margin_name}{A string representing margin name (Defaults to \code{"(all)"}). \code{NA_character_} is also allowed.}

\item{.sort}{A Logical. If \code{TRUE}, sort the result by the column order specified in \code{.without_all} and \code{.margins} and \code{.with_all}.
\itemize{
\item \code{summarise_with_margins()} defaults to \code{is.data.frame(.data)}, \code{union_all_with_margins()} defaults to \code{FALSE}.
\itemize{
\item This is because pipelines using lazy tables should perform the SQL \verb{ORDER BY} as last as possible.
\item As a result of sorting, in the case of lazy tables, \code{NA} may come first, unlike R.
\item See \href{https://dbplyr.tidyverse.org/reference/arrange.tbl_lazy.html}{\code{arrange()} documentation of \code{{dbplyr}}} for details.
}
\item \code{nest_with_margins()} and \code{nest_by_with_margins()} default to \code{TRUE}.
}}

\item{.key}{The name of the resulting nested column.
\itemize{
\item For \code{nest_with_margins()}, passed to \code{.key} argument of \code{\link[tidyr:nest]{tidyr::nest()}}
\item For \code{nest_by_with_margins()}, passed to \code{.key} argument of \code{\link[dplyr:nest_by]{dplyr::nest_by()}}
}}

\item{.names_sep}{Passed to \code{.names_sep} argument of \code{\link[tidyr:nest]{tidyr::nest()}}.}

\item{.keep}{Should the grouping columns be kept in the list column. Passed to \code{.keep} argument of \code{\link[dplyr:nest_by]{dplyr::nest_by()}}.}
}
\value{
A data frame. If \code{.data} is a lazy table,
the output is also a lazy table.
\itemize{
\item Missing values are kept as missing.
\item The order of the columns is as follows from left to right:
\code{.without_all}, \code{.margins}, \code{.with_all} and the remaining columns.
\item Column types specified with \code{.margins} or \code{.with_all}:
\itemize{
\item Columns that are not originally factor or character
(e.g. numeric, integer, logical) are converted to characters.
This is required to add the \code{.margin_name} category.
\item Originally the factor column (assuming a local data frame):
\itemize{
\item Remains as factor. (If ordered, remains as ordered).
\item The level of the factor depends on the case:
\itemize{
\item If \code{.margin_name} is \emph{\strong{NOT}} a \code{NA_character} (such as \code{"(all)"}):
\itemize{
\item \code{.margin_name} is added to the
beginning of the level of the factor.
}
\item If \code{.margin_name} is a \code{NA_character}:
\itemize{
\item If the column has \verb{<NA>} in the level:
\itemize{
\item Error occurs. Because, although the values with level \verb{<NA>}
are not equal to \code{NA_character_}, they will be identical and
indistinguishable when merging \code{NA_character_}
as a new category.
}
\item If the column does not have \verb{<NA>} in the level:
\itemize{
\item Just keeps the original level of factor.
\verb{<NA>} is not included in the level.
This is consistent with the default
\code{\link[base:factor]{base::factor()}} behavior (\code{exclude = NA}).
}
}
}
}
}
}
}
\description{
See below for more details
\itemize{
\item \url{http://10.13.123.231:3838/team_package/demo/grouped_operations_with_margins.html}
}
}
\details{
\strong{\code{summarise_with_margins()}}
\itemize{
\item This is similar to \code{\link[dplyr:summarise]{dplyr::summarise()}} but creates an additional
\code{.margin_name} category for each grouping variable. It assumes a hierarchy of groups
and the higher level groups should be provided first.
\item Regular groups, not used for totals/subtotals can be provided through the \code{.without_all} argument
and will be used as parent groups.
\item If you want to create its own total margin (such as \code{"(all)"})
for a variable that is a regular group and has no hierarchy, specify it with \code{.with_all}.
If there is more than one \code{.with_all}, all combinations of them are generated.
}

\strong{\code{union_all_with_margins()}}
\itemize{
\item Consider each margin as a new category, duplicate the rows and merge them vertically (like \verb{UNION ALL} in SQL).
\item The use of arguments in common with \code{summarise_with_margins()} is the same as for it.
\item \strong{Be aware that the number of rows can be huge.}
}

\strong{\code{nest_with_margins()}}
\itemize{
\item Run like \verb{tidyr::nest(<data>, .by = c(\{\{ .without_all \}\} , \{\{ .margins \}\} , \{\{ .with_all \}\}))} on the result of \code{union_all_with_margins()}.
\item Only works for a local data frame.
}

\strong{\code{nest_by_with_margins()}}
\itemize{
\item Run like \verb{dplyr::nest_by(<data>, dplyr::pick(\{\{ .without_all \}\} , \{\{ .margins \}\} , \{\{ .with_all \}\})} on the result of \code{union_all_with_margins()}.
The result is a row-wise data frame grouped by row.
\item Only works for a local data frame.
}
}
\examples{
# Make a hierarchical margin for `cyl`, `vs`.
summarise_with_margins(
  mtcars,
  n = dplyr::n(),
  mpg = mean(mpg, na.rm = TRUE),
  .margins = c(cyl, vs),
)

# `am` does not create a hierarchy, but is an overall group variable.
summarise_with_margins(
  mtcars,
  n = dplyr::n(),
  mpg = mean(mpg, na.rm = TRUE),
  .margins = c(cyl, vs),
  .without_all = am
)

# `gear` creates "(all)" margins on itself.
summarise_with_margins(
  mtcars,
  n = dplyr::n(),
  mpg = mean(mpg, na.rm = TRUE),
  .margins = c(cyl, vs),
  .without_all = am,
  .with_all = gear
)

# If `.with_all` has multiple columns, all combinations are generated.
summarise_with_margins(
  mtcars,
  n = dplyr::n(),
  mpg = mean(mpg, na.rm = TRUE),
  .margins = c(cyl, vs),
  .without_all = am,
  .with_all = c(gear, carb)
)

# union_all_with_margins()
union_all_with_margins(
  mtcars,
  .margins = c(cyl, vs),
  .without_all = am,
  .with_all = gear
)

# nest_with_margins()
nest_with_margins(
  mtcars,
  .margins = c(cyl, vs),
  .without_all = am,
  .with_all = gear
)

#' nest_by_with_margins()
nest_by_with_margins(
  mtcars,
  .margins = c(cyl, vs),
  .without_all = am,
  .with_all = gear
)
}
\references{
\itemize{
\item Main idea is borrowed from \href{https://gist.github.com/moodymudskipper/6347418d82fea2160178422aa574dec2}{here}.
}
}
